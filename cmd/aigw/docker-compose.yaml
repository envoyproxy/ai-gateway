# Copyright Envoy AI Gateway Authors
# SPDX-License-Identifier: Apache-2.0
# The full text of the Apache license is available in the LICENSE file at
# the root of the repo.

configs:
  # MCP servers configuration for aigw
  mcp-config:
    content: |
      {
        "mcpServers": {
          "kiwi": {
            "type": "http",
            "url": "https://mcp.kiwi.com"
          }
        }
      }

services:
  # ollama-pull pulls the models defined in .env.ollama, to avoid 404s.
  ollama-pull:
    image: alpine/ollama
    container_name: ollama-pull
    environment:
      OLLAMA_HOST: localhost:11434 # intentionally not 127.0.0.1
    env_file:
      - ../../.env.ollama
    entrypoint: sh
    command: -c 'env | grep _MODEL | cut -d= -f2 | xargs -I{} ollama pull {}'
    extra_hosts: # send localhost traffic to the docker host, e.g. your laptop
      - "localhost:host-gateway"

  # aigw is the Envoy AI Gateway CLI a.k.a standalone mode.
  aigw:
    image: envoyproxy/ai-gateway-cli:latest
    # Note: Run `make build.aigw GOOS_LIST=linux` from the project root prior
    # to `docker compose up --build --wait -d` here.
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        VARIANT: base-nossl
        COMMAND_NAME: aigw
    container_name: aigw
    depends_on:
      ollama-pull:
        condition: service_completed_successfully
    environment:
      - OPENAI_BASE_URL=http://host.docker.internal:11434/v1
      - OPENAI_API_KEY=unused
    configs:
      - source: mcp-config
        target: /etc/aigw/mcp-servers.json
    ports:
      - "1975:1975" # OpenAI compatible endpoint at /v1, MCP server at /mcp
      - "1064:1064" # Admin server: /metrics (Prometheus) and /health endpoints
    extra_hosts: # localhost:host-gateway trick doesn't work with aigw
      - "host.docker.internal:host-gateway"
    command: ["run", "--mcp-config", "/etc/aigw/mcp-servers.json"]

  # aigw-images is a second gateway instance pointing to OpenAI for image generation
  aigw-images:
    image: envoyproxy/ai-gateway-cli:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        VARIANT: base-nossl
        COMMAND_NAME: aigw
    container_name: aigw-images
    environment:
      - OPENAI_BASE_URL=https://api.openai.com/v1
    env_file:
      - ../../.env.images
    ports:
      - "2975:1975"
    command: ["run"]

  # chat-completion is a simple curl-based test client for sending requests to aigw.
  chat-completion:
    image: golang:1.25
    container_name: chat-completion
    profiles: ["test"]
    env_file:
      - ../../.env.ollama
    command:
      - sh
      - -c
      - |
        curl -s -w %{http_code} \
          -X POST http://aigw:1975/v1/chat/completions \
          -H "Authorization: Bearer unused" \
          -H "Content-Type: application/json" \
          -d "{\"model\":\"$$CHAT_MODEL\",\"messages\":[{\"role\":\"user\",\"content\":\"Answer in up to 3 words: Which ocean contains Bouvet Island?\"}]}"
    extra_hosts: # localhost:host-gateway trick doesn't work with aigw
      - "host.docker.internal:host-gateway"

  # completion is a simple curl-based test client for sending completion requests to aigw.
  completion:
    image: golang:1.25
    container_name: completion
    profiles: ["test"]
    env_file:
      - ../../.env.ollama
    command:
      - sh
      - -c
      - |
        curl -s -w %{http_code} \
          -X POST http://aigw:1975/v1/completions \
          -H "Authorization: Bearer unused" \
          -H "Content-Type: application/json" \
          -d "{\"model\":\"$$COMPLETION_MODEL\",\"prompt\":\"def fib(n):\\n    if n <= 1:\\n        return n\\n    else:\\n        return fib(n-1) + fib(n-2)\",\"max_tokens\":25,\"temperature\":0.4,\"top_p\":0.9}"
    extra_hosts: # localhost:host-gateway trick doesn't work with aigw
      - "host.docker.internal:host-gateway"

  # embeddings is a simple curl-based test client for sending embeddings requests to aigw.
  embeddings:
    image: golang:1.25
    container_name: embeddings
    profiles: ["test"]
    env_file:
      - ../../.env.ollama
    command:
      - sh
      - -c
      - |
        curl -s -w %{http_code} \
          -X POST http://aigw:1975/v1/embeddings \
          -H "Authorization: Bearer unused" \
          -H "Content-Type: application/json" \
          -d "{\"model\":\"$$EMBEDDINGS_MODEL\",\"input\":\"How do I reset my password?\"}"
    extra_hosts: # localhost:host-gateway trick doesn't work with aigw
      - "host.docker.internal:host-gateway"

  # image-generation (curl) sends requests to aigw-images backed by OpenAI
  image-generation:
    image: golang:1.25
    container_name: image-generation
    profiles: ["test"]
    env_file:
      - ../../.env.images
    command:
      - sh
      - -c
      - |
        curl -s -w %{http_code} \
          -X POST http://aigw-images:1975/v1/images/generations \
          -H "Content-Type: application/json" \
          -H "x-ai-eg-model: $$IMAGE_GENERATION_MODEL" \
          -d "{\"model\":\"$$IMAGE_GENERATION_MODEL\",\"prompt\":\"A watercolor painting of a red fox in a birch forest\",\"size\":\"1024x1024\",\"quality\":\"low\"}"

  # mcp is a test client for calling MCP tools through aigw.
  mcp:
    image: ghcr.io/modelcontextprotocol/inspector:latest
    container_name: mcp
    profiles: ["test"]
    entrypoint: node
    command:
      - cli/build/cli.js
      - --cli
      - http://aigw:1975/mcp
      - --method
      - tools/call
      - --tool-name
      - kiwi__search-flight
      - --tool-arg
      - flyFrom=NYC
      - --tool-arg
      - flyTo=LAX
      - --tool-arg
      - departureDate=15/12/2025

