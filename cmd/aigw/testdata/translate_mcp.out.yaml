# Copyright Envoy AI Gateway Authors
# SPDX-License-Identifier: Apache-2.0
# The full text of the Apache license is available in the LICENSE file at
# the root of the repo.

apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: mcp-gateway-class
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: Backend
metadata:
  name: test-mcp-server
  namespace: default
spec:
  endpoints:
  - fqdn:
      hostname: test-mcp-server.foo.com
      port: 80
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: Backend
metadata:
  name: default-mcp-server
  namespace: default
spec:
  endpoints:
  - fqdn:
      hostname: default-mcp-server.foo.com
      port: 80
---
apiVersion: v1
data:
  jwks: |
    {
      "keys": [
        {
          "kty": "RSA",
          "n": "u1SU1LfVLPHCozMxH2Mo4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0_IzW7yWR7QkrmBL7jTKEn5u-qKhbwKfBstIs-bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyehkd3qqGElvW_VDL5AaWTg0nLVkjRo9z-40RQzuVaE8AkAFmxZzow3x-VJYKdjykkJ0iT9wCS0DRTXu269V264Vf_3jvredZiKRkgwlL9xNAwxXFg0x_XFw005UWVRIkdgcKWTjpBP2dPwVZ4WWC-9aGVd-Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbcmw",
          "e": "AQAB",
          "alg": "RS256",
          "use": "sig"
        },
        {
          "alg": "RS256",
          "e": "AQAB",
          "key_ops": [
            "verify"
          ],
          "kty": "RSA",
          "n": "xOHb-i1WDfeAvsbXTSOtosl3hCUDHQ8fRDqX_Rt998-hZDJmAoPOu4J-wcwq5aZtSn_iWUYLcK2WmC_1n-p1eyc-Pl4CBnxF7LUjCk-WGhniaCzXC5I5RON6c5N-MdE0UfukK0PM0zD3iQonZq0fIsnOYyFdYdWvQ5XW-C2aLlq2FUKrjmhAav10jIC0KGd2dHRzauzfLMUmt_iMnpU84Xrur1zRYzBO4D90rN0ypC2HH7o_zI8Osx4o1L8BScW78545sWyVbaprhBV1I2Sa4SH3NAc25ej3RIh-f13Yu97FVfO0AIG4VfFiaMmsTqNTCiBkM20tXD2Z-cHJTKemXzFgInJoqFLAkHLzJ0lPvAkKOgAOufLHa7RA-C276OXd72IXPsL1UOLN4sjhGqTtaynVa00yuHdi3f4-aoy9F9SUJeWfPg--nZNLzuI0eyufsTFywnx1bTQ_kdYlEr0dRE5sujlMk3cZ7FmOQRvcjA9MxFzoVKMmlZc6LMCgqw-P",
          "use": "sig",
          "kid": "b520b3c2c4bd75a10e9cebc9576933dc"
        }
      ]
    }
kind: ConfigMap
metadata:
  name: jwks-configmap
  namespace: default
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-mcp-route
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: mcp-gateway
  rules:
    - backendRefs:
        - group: gateway.envoyproxy.io
          kind: Backend
          name: default-mcp-route-mcp-proxy
          namespace: default
          port: 9856
      filters:
        - requestHeaderModifier:
            set:
              - name: x-ai-eg-mcp-route
                value: default/mcp-route
          type: RequestHeaderModifier
      matches:
        - headers:
            - name: x-mcp-tenant
              value: test-tenant
          path:
            type: Exact
            value: /mcp
      timeouts:
        backendRequest: 30m
        request: 30m
    - filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-mcp-route-oauth-protected-resource-metadata
          type: ExtensionRef
      matches:
        - path:
            type: Exact
            value: /.well-known/oauth-protected-resource
      name: oauth-protected-resource-metadata-root
    - filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-mcp-route-oauth-protected-resource-metadata
          type: ExtensionRef
      matches:
        - path:
            type: Exact
            value: /.well-known/oauth-protected-resource/mcp
      name: oauth-protected-resource-metadata-suffix
    - filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-mcp-route-oauth-authorization-server-metadata
          type: ExtensionRef
      matches:
        - path:
            type: Exact
            value: /.well-known/oauth-authorization-server
      name: oauth-authorization-server-metadata-root
    - filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-mcp-route-oauth-authorization-server-metadata
          type: ExtensionRef
      matches:
        - path:
            type: Exact
            value: /.well-known/oauth-authorization-server/mcp
      name: oauth-authorization-server-metadata-suffix
    - backendRefs:
        - group: gateway.envoyproxy.io
          kind: Backend
          name: test-mcp-server
      filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-bf-mcp-route-test-mcp-server
          type: ExtensionRef
      matches:
        - headers:
            - name: x-ai-eg-mcp-backend
              value: test-mcp-server
            - name: x-ai-eg-mcp-route
              value: default/mcp-route
          path:
            type: PathPrefix
            value: /
      timeouts:
        backendRequest: 30m
        request: 30m
    - backendRefs:
        - group: gateway.envoyproxy.io
          kind: Backend
          name: default-mcp-server
          port: 80
      filters:
        - extensionRef:
            group: gateway.envoyproxy.io
            kind: HTTPRouteFilter
            name: ai-eg-mcp-bf-mcp-route-default-mcp-server
          type: ExtensionRef
      matches:
        - headers:
            - name: x-ai-eg-mcp-backend
              value: default-mcp-server
            - name: x-ai-eg-mcp-route
              value: default/mcp-route
          path:
            type: PathPrefix
            value: /
      timeouts:
        backendRequest: 30m
        request: 30m
status:
  parents: null
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: Backend
metadata:
  creationTimestamp: null
  name: default-mcp-route-mcp-proxy
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  endpoints:
    - ip:
        address: 192.0.2.42
        port: 9856
status: {}
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: HTTPRouteFilter
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-bf-mcp-route-default-mcp-server
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  credentialInjection:
    credential:
      valueRef:
        group: null
        kind: null
        name: ai-eg-mcp-bf-mcp-route-default-mcp-server-credential
    header: Authorization
    overwrite: true
  urlRewrite:
    hostname:
      type: Backend
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: HTTPRouteFilter
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-bf-mcp-route-test-mcp-server
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  urlRewrite:
    hostname:
      type: Backend
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: HTTPRouteFilter
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-mcp-route-oauth-authorization-server-metadata
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  directResponse:
    body:
      inline: '{"authorization_endpoint":"https://auth-server.example.com/protocol/openid-connect/auth","code_challenge_methods_supported":["S256"],"grant_types_supported":["authorization_code"],"issuer":"https://auth-server.example.com","jwks_uri":"https://auth-server.example.com/protocol/openid-connect/certs","response_types_supported":["code"],"scopes_supported":["echo","sum","countdown"],"token_endpoint":"https://auth-server.example.com/protocol/openid-connect/token","token_endpoint_auth_methods_supported":["client_secret_basic","client_secret_post"]}'
      type: Inline
    contentType: application/json
    statusCode: 200
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: HTTPRouteFilter
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-mcp-route-oauth-protected-resource-metadata
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  directResponse:
    body:
      inline: '{"authorization_servers":["https://auth-server.example.com"],"bearer_methods_supported":["header"],"resource":"https://foo.bar.com/mcp","scopes_supported":["echo","sum","countdown"]}'
      type: Inline
    contentType: application/json
    statusCode: 200
---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: mcp-gateway-default
stringData:
  filter-config.yaml: |
    mcpConfig:
      backendListenerAddr: http://127.0.0.1:10088
      routes:
      - backends:
        - name: test-mcp-server
          path: /mcp
          toolSelector:
            include:
            - tool1
            - tool2
        - name: default-mcp-server
          path: /mcp
          toolSelector:
            includeRegex:
            - ^foo.*$
        name: default/mcp-route
    uuid: aigw-translate
---
apiVersion: v1
data:
  credential: QmVhcmVyIHNvbWUtYXBpLWtleQ==
kind: Secret
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-bf-mcp-route-default-mcp-server-credential
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: test-token
  namespace: default
stringData:
  apiKey: some-api-key
type: Opaque
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  creationTimestamp: null
  name: mcp-gateway
  namespace: default
spec:
  gatewayClassName: mcp-gateway-class
  listeners:
    - name: http
      port: 80
      protocol: HTTP
status: {}
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: BackendTrafficPolicy
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-mcp-route-oauth-protected-resource-metadata
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  responseOverride:
    - match:
        statusCodes:
          - type: Value
            value: 401
      response:
        body:
          inline: Bearer error="invalid_request", error_description="No access token
            was provided in this request", resource_metadata="https://foo.bar.com/.well-known/oauth-protected-resource"
          type: Inline
        statusCode: 401
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: ai-eg-mcp-mcp-route
status:
  ancestors: null
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  creationTimestamp: null
  name: ai-eg-mcp-mcp-route
  namespace: default
  ownerReferences:
    - apiVersion: aigateway.envoyproxy.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: MCPRoute
      name: mcp-route
      uid: ""
spec:
  jwt:
    providers:
      - localJWKS:
          type: ValueRef
          valueRef:
            group: ""
            kind: ConfigMap
            name: jwks-configmap
        name: mcp-jwt-provider
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: ai-eg-mcp-mcp-route
status:
  ancestors: null
