---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  name: llmroutes.aigateway.envoyproxy.io
spec:
  group: aigateway.envoyproxy.io
  names:
    kind: LLMRoute
    listKind: LLMRouteList
    plural: llmroutes
    singular: llmroute
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          LLMRoute combines multiple LLMBackends and attaching them to Gateway(s) resources.

          This serves as a way to define a "unified" LLM API for a Gateway which allows downstream
          clients to use a single schema API to interact with multiple LLM backends.

          The InputSchema is used to determine the structure of the requests that the Gateway will
          receive. And then the Gateway will route the traffic to the appropriate LLMBackend based
          on the output schema of the LLMBackend while doing the other necessary jobs like
          upstream authentication, rate limit, etc.

          LLMRoute references a HTTPRoute resource as a basis for routing the traffic. The AI Gateway controller
          modifies the HTTPRoute resource to include the necessary filters to achieve the necessary jobs,
          notably the AI Gateway external processor filter.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the details of the LLM policy.
            properties:
              httpRouteRef:
                description: |-
                  HTTPRouteRef is the name of the HTTPRoute resource that the Gateway will use to route the traffic.
                  The namespace is "local", i.e. the same namespace as the LLMRoute.

                  In the matching configuration of the referenced HTTPRoute, `x-envoy-ai-gateway-llm-model` header
                  can be used to describe the routing behavior.

                  Currently, only the exact header matching is supported, otherwise the configuration will be rejected.
                properties:
                  name:
                    description: Name is the name of the HTTPRoute in the same namespace
                      as the LLMRoute.
                    type: string
                required:
                - name
                type: object
              inputSchema:
                description: |-
                  APISchema specifies the API schema of the input that the target Gateway(s) will receive.
                  Based on this schema, the ai-gateway will perform the necessary transformation to the
                  output schema specified in the selected LLMBackend during the routing process.

                  Currently, the only supported schema is OpenAI as the input schema.
                properties:
                  schema:
                    description: Schema is the API schema of the LLMRoute or LLMBackend.
                    enum:
                    - OpenAI
                    - AWSBedrock
                    type: string
                  version:
                    description: Version is the version of the API schema.
                    type: string
                required:
                - schema
                type: object
                x-kubernetes-validations:
                - rule: self.schema == 'OpenAI'
            required:
            - httpRouteRef
            - inputSchema
            type: object
        type: object
    served: true
    storage: true
