// Copyright Envoy AI Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apiv1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1"
	scheme "github.com/envoyproxy/ai-gateway/api/v1alpha1/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// AIServiceBackendsGetter has a method to return a AIServiceBackendInterface.
// A group's client should implement this interface.
type AIServiceBackendsGetter interface {
	AIServiceBackends(namespace string) AIServiceBackendInterface
}

// AIServiceBackendInterface has methods to work with AIServiceBackend resources.
type AIServiceBackendInterface interface {
	Create(ctx context.Context, aIServiceBackend *apiv1alpha1.AIServiceBackend, opts v1.CreateOptions) (*apiv1alpha1.AIServiceBackend, error)
	Update(ctx context.Context, aIServiceBackend *apiv1alpha1.AIServiceBackend, opts v1.UpdateOptions) (*apiv1alpha1.AIServiceBackend, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, aIServiceBackend *apiv1alpha1.AIServiceBackend, opts v1.UpdateOptions) (*apiv1alpha1.AIServiceBackend, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.AIServiceBackend, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.AIServiceBackendList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.AIServiceBackend, err error)
	AIServiceBackendExpansion
}

// aIServiceBackends implements AIServiceBackendInterface
type aIServiceBackends struct {
	*gentype.ClientWithList[*apiv1alpha1.AIServiceBackend, *apiv1alpha1.AIServiceBackendList]
}

// newAIServiceBackends returns a AIServiceBackends
func newAIServiceBackends(c *AigatewayV1alpha1Client, namespace string) *aIServiceBackends {
	return &aIServiceBackends{
		gentype.NewClientWithList[*apiv1alpha1.AIServiceBackend, *apiv1alpha1.AIServiceBackendList](
			"aiservicebackends",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.AIServiceBackend { return &apiv1alpha1.AIServiceBackend{} },
			func() *apiv1alpha1.AIServiceBackendList { return &apiv1alpha1.AIServiceBackendList{} },
		),
	}
}
