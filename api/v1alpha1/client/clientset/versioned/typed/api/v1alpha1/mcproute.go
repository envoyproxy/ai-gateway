// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apiv1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1"
	scheme "github.com/envoyproxy/ai-gateway/api/v1alpha1/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// MCPRoutesGetter has a method to return a MCPRouteInterface.
// A group's client should implement this interface.
type MCPRoutesGetter interface {
	MCPRoutes(namespace string) MCPRouteInterface
}

// MCPRouteInterface has methods to work with MCPRoute resources.
type MCPRouteInterface interface {
	Create(ctx context.Context, mCPRoute *apiv1alpha1.MCPRoute, opts v1.CreateOptions) (*apiv1alpha1.MCPRoute, error)
	Update(ctx context.Context, mCPRoute *apiv1alpha1.MCPRoute, opts v1.UpdateOptions) (*apiv1alpha1.MCPRoute, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, mCPRoute *apiv1alpha1.MCPRoute, opts v1.UpdateOptions) (*apiv1alpha1.MCPRoute, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.MCPRoute, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.MCPRouteList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.MCPRoute, err error)
	MCPRouteExpansion
}

// mCPRoutes implements MCPRouteInterface
type mCPRoutes struct {
	*gentype.ClientWithList[*apiv1alpha1.MCPRoute, *apiv1alpha1.MCPRouteList]
}

// newMCPRoutes returns a MCPRoutes
func newMCPRoutes(c *AigatewayV1alpha1Client, namespace string) *mCPRoutes {
	return &mCPRoutes{
		gentype.NewClientWithList[*apiv1alpha1.MCPRoute, *apiv1alpha1.MCPRouteList](
			"mcproutes",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.MCPRoute { return &apiv1alpha1.MCPRoute{} },
			func() *apiv1alpha1.MCPRouteList { return &apiv1alpha1.MCPRouteList{} },
		),
	}
}
