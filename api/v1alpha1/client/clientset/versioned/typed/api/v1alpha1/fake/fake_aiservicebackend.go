// Copyright Envoy AI Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1"
	apiv1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1/client/clientset/versioned/typed/api/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAIServiceBackends implements AIServiceBackendInterface
type fakeAIServiceBackends struct {
	*gentype.FakeClientWithList[*v1alpha1.AIServiceBackend, *v1alpha1.AIServiceBackendList]
	Fake *FakeAigatewayV1alpha1
}

func newFakeAIServiceBackends(fake *FakeAigatewayV1alpha1, namespace string) apiv1alpha1.AIServiceBackendInterface {
	return &fakeAIServiceBackends{
		gentype.NewFakeClientWithList[*v1alpha1.AIServiceBackend, *v1alpha1.AIServiceBackendList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("aiservicebackends"),
			v1alpha1.SchemeGroupVersion.WithKind("AIServiceBackend"),
			func() *v1alpha1.AIServiceBackend { return &v1alpha1.AIServiceBackend{} },
			func() *v1alpha1.AIServiceBackendList { return &v1alpha1.AIServiceBackendList{} },
			func(dst, src *v1alpha1.AIServiceBackendList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.AIServiceBackendList) []*v1alpha1.AIServiceBackend {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.AIServiceBackendList, items []*v1alpha1.AIServiceBackend) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
