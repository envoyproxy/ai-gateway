// Copyright Envoy AI Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1"
	apiv1alpha1 "github.com/envoyproxy/ai-gateway/api/v1alpha1/client/clientset/versioned/typed/api/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeMCPRoutes implements MCPRouteInterface
type fakeMCPRoutes struct {
	*gentype.FakeClientWithList[*v1alpha1.MCPRoute, *v1alpha1.MCPRouteList]
	Fake *FakeAigatewayV1alpha1
}

func newFakeMCPRoutes(fake *FakeAigatewayV1alpha1, namespace string) apiv1alpha1.MCPRouteInterface {
	return &fakeMCPRoutes{
		gentype.NewFakeClientWithList[*v1alpha1.MCPRoute, *v1alpha1.MCPRouteList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("mcproutes"),
			v1alpha1.SchemeGroupVersion.WithKind("MCPRoute"),
			func() *v1alpha1.MCPRoute { return &v1alpha1.MCPRoute{} },
			func() *v1alpha1.MCPRouteList { return &v1alpha1.MCPRouteList{} },
			func(dst, src *v1alpha1.MCPRouteList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.MCPRouteList) []*v1alpha1.MCPRoute { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.MCPRouteList, items []*v1alpha1.MCPRoute) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
